/*********************************************************************
*
* precomputation of 
*      [        oo                                                         ]
*      |       /                                                           |
*      |  1    |                 2 [           i t            i t   ]      |
*  Real| ---   | sinc(pi Delta t)  | psi(.5 +  ---) + psi(1 + --- ) |   dt |
*      | 2pi   |                   [            2              2    ]      |
*      |       /                                                           |
*      [        -oo                                                        ]
*
* for Delta = 1.0, 1.01, 1.02, ..., 5.0
*
* To make this list, do something like the folowing in sage:
*----------------------------------------------------------
import scipy
from scipy.special import digamma


def sinc_square(u, Delta):
    x = u * Delta * RR(pi)

    if abs(x) < .00001:
        return 1 - 1.0/3.0 * x^2 + 2.0/45.0 * x^4 - 1.0/315.0 * x^6
    else:
        a = sin(x)/x
        return a*a;

def foo(Delta):
    f = lambda t : sinc_square(t, Delta)

    g = lambda t : RR(f(t)) * (digamma(.5 + CC.0 * t/2.0) + digamma(1.0 + CC.0 * t/2.0)).real
    
    return (numerical_integral(g, -oo, oo)[0])/RR(2*pi)

def do_precomputation():
    L = []
    for Delta in [1.00, 1.01, .., 5]:
        x = foo(Delta)
        print Delta, x
        L.append(x)

    count = 0
    for x in L:
        count = count + 1
        print "{x},".format(x=x.str()[:8]),
        if count % 7 == 0:
            print
do_precomputation()

****************************************************/

#include <iostream>
#include <cmath>

/*
double precomputed_gamma_terms[401] = {
-0.32100, -0.31897, -0.31626, -0.31413, -0.31190, -0.30952, -0.30731,
-0.30473, -0.30307, -0.30098, -0.29938, -0.29505, -0.29422, -0.29250,
-0.29060, -0.28858, -0.28582, -0.28483, -0.28288, -0.28153, -0.27918,
-0.27727, -0.27588, -0.27351, -0.27188, -0.27023, -0.26846, -0.26700,
-0.26501, -0.26334, -0.26167, -0.26015, -0.25833, -0.25691, -0.25536,
-0.25382, -0.25233, -0.25089, -0.24944, -0.24780, -0.24625, -0.24489,
-0.24341, -0.24179, -0.24062, -0.23924, -0.23777, -0.23655, -0.23520,
-0.23382, -0.23249, -0.23105, -0.22999, -0.22886, -0.22752, -0.22618,
-0.22502, -0.22372, -0.22255, -0.22069, -0.22018, -0.21907, -0.21782,
-0.21673, -0.21569, -0.21443, -0.21309, -0.21218, -0.21122, -0.21005,
-0.20900, -0.20793, -0.20698, -0.20591, -0.20491, -0.20388, -0.20285,
-0.20199, -0.20139, -0.19992, -0.19909, -0.19801, -0.19701, -0.19612,
-0.19508, -0.19428, -0.19341, -0.19244, -0.19133, -0.19060, -0.18970,
-0.18890, -0.18798, -0.18726, -0.18631, -0.18539, -0.18455, -0.18371,
-0.18297, -0.18215, -0.18139, -0.18067, -0.17984, -0.17897, -0.17814,
-0.17747, -0.17665, -0.17591, -0.17516, -0.17411, -0.17362, -0.17293,
-0.17217, -0.17147, -0.17058, -0.17000, -0.16944, -0.16863, -0.16793,
-0.16724, -0.16664, -0.16593, -0.16521, -0.16459, -0.16381, -0.16299,
-0.16266, -0.16205, -0.16132, -0.16071, -0.16007, -0.15942, -0.15874,
-0.15819, -0.15743, -0.15697, -0.15631, -0.15594, -0.15519, -0.15458,
-0.15398, -0.15345, -0.15287, -0.15229, -0.15175, -0.15101, -0.15055,
-0.15006, -0.14950, -0.14919, -0.14840, -0.14786, -0.14756, -0.14681,
-0.14630, -0.14576, -0.14527, -0.14433, -0.14422, -0.14373, -0.14325,
-0.14272, -0.14218, -0.14174, -0.14120, -0.14087, -0.14024, -0.13977,
-0.13925, -0.13860, -0.13840, -0.13788, -0.13736, -0.13698, -0.13661,
-0.13598, -0.13556, -0.13514, -0.13470, -0.13431, -0.13374, -0.13341,
-0.13286, -0.13252, -0.13194, -0.13164, -0.13116, -0.13078, -0.13036,
-0.12988, -0.12951, -0.12910, -0.12877, -0.12830, -0.12787, -0.12748,
-0.12711, -0.12670, -0.12631, -0.12589, -0.12555, -0.12515, -0.12483,
-0.12439, -0.12399, -0.12363, -0.12324, -0.12286, -0.12247, -0.12214,
-0.12177, -0.12141, -0.12104, -0.12067, -0.12031, -0.11993, -0.11961,
-0.11949, -0.11889, -0.11854, -0.11826, -0.11792, -0.11758, -0.11706,
-0.11686, -0.11653, -0.11622, -0.11585, -0.11552, -0.11519, -0.11487,
-0.11457, -0.11430, -0.11393, -0.11359, -0.11325, -0.11296, -0.11263,
-0.11233, -0.11204, -0.11172, -0.11141, -0.11112, -0.11082, -0.11051,
-0.11020, -0.10992, -0.10959, -0.10930, -0.10903, -0.10866, -0.10841,
-0.10815, -0.10788, -0.10759, -0.10731, -0.10705, -0.10670, -0.10646,
-0.10615, -0.10586, -0.10562, -0.10535, -0.10504, -0.10481, -0.10453,
-0.10426, -0.10397, -0.10371, -0.10346, -0.10321, -0.10293, -0.10264,
-0.10252, -0.10219, -0.10187, -0.10155, -0.10139, -0.10109, -0.10090,
-0.10065, -0.10042, -0.10016, -0.09987, -0.09968, -0.09939, -0.09916,
-0.09891, -0.09870, -0.09847, -0.09818, -0.09797, -0.09772, -0.09752,
-0.09725, -0.09698, -0.09679, -0.09653, -0.09634, -0.09609, -0.09593,
-0.09565, -0.09547, -0.09519, -0.09494, -0.09476, -0.09457, -0.09430,
-0.09409, -0.09389, -0.09352, -0.09343, -0.09321, -0.09304, -0.09287,
-0.09260, -0.09245, -0.09218, -0.09186, -0.09176, -0.09156, -0.09133,
-0.09114, -0.09094, -0.09081, -0.09055, -0.09032, -0.09013, -0.08994,
-0.08976, -0.08948, -0.08940, -0.08913, -0.08901, -0.08874, -0.08854,
-0.08833, -0.08818, -0.08789, -0.08777, -0.08761, -0.08742, -0.08728,
-0.08699, -0.08688, -0.08664, -0.08645, -0.08628, -0.08613, -0.08592,
-0.08573, -0.08555, -0.08539, -0.08521, -0.08502, -0.08484, -0.08467,
-0.08447, -0.08431, -0.08414, -0.08395, -0.08379, -0.08360, -0.08344,
-0.08342, -0.08309, -0.08291, -0.08278, -0.08258, -0.08240, -0.08225,
-0.08210, -0.08192, -0.08176, -0.08158, -0.08143, -0.08127, -0.08111,
-0.08095, -0.08079, -0.08060, -0.08046, -0.08029, -0.08014, -0.08004,
-0.07985, -0.07977, -0.07952, -0.07939, -0.07922, -0.07910, -0.07883,
-0.07877, -0.07856, -0.07843, -0.07827, -0.07813, -0.07798, -0.07785,
-0.07765, -0.07759};
*/

double precomputed_gamma_terms[401] = {
-0.10022, -0.10057, -0.09992, -0.09992, -0.09975, -0.09938, -0.09914,
-0.09845, -0.09878, -0.09855, -0.09886, -0.09783, -0.09752, -0.09727,
-0.09705, -0.09669, -0.09550, -0.09626, -0.09591, -0.09613, -0.09533,
-0.09477, -0.09444, -0.09411, -0.09390, -0.09373, -0.09336, -0.09298,
-0.09263, -0.09229, -0.09196, -0.09174, -0.09119, -0.09099, -0.09060,
-0.09038, -0.09005, -0.08996, -0.08924, -0.08905, -0.08850, -0.08842,
-0.08805, -0.08782, -0.08739, -0.08708, -0.08664, -0.08649, -0.08613,
-0.08586, -0.08541, -0.08488, -0.08484, -0.08472, -0.08426, -0.08378,
-0.08367, -0.08319, -0.08291, -0.08162, -0.08223, -0.08203, -0.08162,
-0.08138, -0.08118, -0.08070, -0.08013, -0.08007, -0.07989, -0.07946,
-0.07921, -0.07889, -0.07871, -0.07837, -0.07813, -0.07781, -0.07752,
-0.07743, -0.07761, -0.07666, -0.07651, -0.07611, -0.07578, -0.07556,
-0.07515, -0.07515, -0.07481, -0.07475, -0.07388, -0.07393, -0.07356,
-0.07339, -0.07305, -0.07297, -0.07259, -0.07221, -0.07198, -0.07177,
-0.07167, -0.07128, -0.07085, -0.07080, -0.07065, -0.07040, -0.06998,
-0.06984, -0.06942, -0.06948, -0.06909, -0.06847, -0.06855, -0.06837,
-0.06809, -0.06788, -0.06746, -0.06738, -0.06730, -0.06695, -0.06672,
-0.06682, -0.06686, -0.06609, -0.06580, -0.06578, -0.06527, -0.06519,
-0.06505, -0.06485, -0.06455, -0.06440, -0.06414, -0.06392, -0.06363,
-0.06349, -0.06330, -0.06303, -0.06280, -0.06269, -0.06246, -0.06219,
-0.06209, -0.06190, -0.06166, -0.06149, -0.06132, -0.06091, -0.06086,
-0.06075, -0.06054, -0.06052, -0.06014, -0.05996, -0.05981, -0.05960,
-0.05944, -0.05922, -0.05909, -0.05889, -0.05869, -0.05859, -0.05837,
-0.05819, -0.05792, -0.05780, -0.05762, -0.05756, -0.05771, -0.05713,
-0.05692, -0.05679, -0.05663, -0.05647, -0.05624, -0.05617, -0.05593,
-0.05566, -0.05563, -0.05549, -0.05534, -0.05526, -0.05495, -0.05489,
-0.05470, -0.05414, -0.05428, -0.05422, -0.05401, -0.05390, -0.05376,
-0.05351, -0.05342, -0.05328, -0.05318, -0.05297, -0.05282, -0.05261,
-0.05256, -0.05240, -0.05223, -0.05213, -0.05198, -0.05186, -0.05180,
-0.05161, -0.05141, -0.05126, -0.05113, -0.05100, -0.05083, -0.05074,
-0.05060, -0.05047, -0.05032, -0.05016, -0.05004, -0.04968, -0.04979,
-0.04998, -0.04948, -0.04937, -0.04932, -0.04917, -0.04910, -0.04879,
-0.04876, -0.04865, -0.04850, -0.04837, -0.04823, -0.04831, -0.04801,
-0.04788, -0.04783, -0.04770, -0.04753, -0.04739, -0.04723, -0.04716,
-0.04701, -0.04696, -0.04683, -0.04672, -0.04664, -0.04651, -0.04626,
-0.04624, -0.04614, -0.04605, -0.04602, -0.04569, -0.04566, -0.04554,
-0.04550, -0.04538, -0.04546, -0.04540, -0.04509, -0.04490, -0.04484,
-0.04469, -0.04460, -0.04450, -0.04399, -0.04432, -0.04420, -0.04408,
-0.04397, -0.04387, -0.04375, -0.04365, -0.04359, -0.04347, -0.04338,
-0.04328, -0.04321, -0.04306, -0.04285, -0.04270, -0.04261, -0.04266,
-0.04259, -0.04247, -0.04239, -0.04226, -0.04226, -0.04209, -0.04200,
-0.04190, -0.04184, -0.04176, -0.04160, -0.04159, -0.04143, -0.04139,
-0.04125, -0.04117, -0.04106, -0.04099, -0.04090, -0.04070, -0.04069,
-0.04063, -0.04061, -0.04044, -0.04033, -0.04028, -0.04020, -0.04009,
-0.04001, -0.03991, -0.03986, -0.03974, -0.03968, -0.03961, -0.03953,
-0.03925, -0.03935, -0.03927, -0.03903, -0.03910, -0.03903, -0.03892,
-0.03885, -0.03879, -0.03866, -0.03865, -0.03851, -0.03847, -0.03840,
-0.03835, -0.03821, -0.03815, -0.03805, -0.03807, -0.03790, -0.03783,
-0.03773, -0.03770, -0.03762, -0.03750, -0.03747, -0.03739, -0.03741,
-0.03719, -0.03721, -0.03706, -0.03703, -0.03711, -0.03688, -0.03679,
-0.03669, -0.03663, -0.03660, -0.03650, -0.03643, -0.03635, -0.03629,
-0.03621, -0.03618, -0.03612, -0.03569, -0.03593, -0.03586, -0.03578,
-0.03594, -0.03563, -0.03558, -0.03554, -0.03544, -0.03537, -0.03531,
-0.03525, -0.03518, -0.03511, -0.03501, -0.03497, -0.03492, -0.03486,
-0.03480, -0.03479, -0.03465, -0.03459, -0.03452, -0.03446, -0.03440,
-0.03435, -0.03428, -0.03422, -0.03414, -0.03411, -0.03409, -0.03392,
-0.03391, -0.03382, -0.03377, -0.03370, -0.03365, -0.03359, -0.03346,
-0.03338, -0.03341};


double gamma_terms(double Delta) {
    double delta = Delta;
    if(Delta < 1 || Delta > 5) {
        std::cerr << "WARNING in gamma_terms(), Delta was out of bounds." << std::endl;
        
        return 100000000000;    // this value should be large enough to indicate
                                // that something has gone wrong...
                                //
                                // I would return 0.0/0.0, but I don't remember right
                                // now what that does when -ffast-math is used.
    }

    if(Delta == 1) {
        return precomputed_gamma_terms[0];
    }
    if(Delta == 5) {
        return precomputed_gamma_terms[500];
    }
    else {
        // We use linear interpolation to estimate the value.
        //
        // I don't know exactly how accurate this is. Probably about
        // 3 digits?
        
        Delta = (Delta - 1.0) * 100;
        int a = (int)(std::floor(Delta));
        int b = (int)(std::ceil(Delta));

        if(a == b) {
            return precomputed_gamma_terms[a];
        }

        double x = precomputed_gamma_terms[a] * (Delta - a) + precomputed_gamma_terms[b] * (b - Delta);
        return x;
    }
}
