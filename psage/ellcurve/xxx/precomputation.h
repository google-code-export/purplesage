/*********************************************************************
*
* precomputation of 
*      [        oo                                                         ]
*      |       /                                                           |
*      |  1    |                 2 [           i t            i t   ]      |
*  Real| ---   | sinc(pi Delta t)  | psi(.5 +  ---) + psi(1 + --- ) |   dt |
*      | 2pi   |                   [            2              2    ]      |
*      |       /                                                           |
*      [        -oo                                                        ]
*
* for Delta = 1.0, 1.01, 1.02, ..., 5.0
*
* To make this list, do something like the folowing in sage:
*----------------------------------------------------------
import scipy
from scipy.special import digamma


def sinc_square(u, Delta):
    x = u * Delta * RR(pi)

    if abs(x) < .00001:
        return 1 - 1.0/3.0 * x^2 + 2.0/45.0 * x^4 - 1.0/315.0 * x^6
    else:
        a = sin(x)/x
        return a*a;

def foo(Delta):
    f = lambda t : sinc_square(t, Delta)

    g = lambda t : RR(f(t)) * (digamma(.5 + CC.0 * t/2.0) + digamma(1.0 + CC.0 * t/2.0)).real
    
    return (numerical_integral(g, -oo, oo)[0])/RR(2*pi)

def do_precomputation():
    L = []
    for Delta in [1.00, 1.01, .., 5]:
        x = foo(Delta)
        print Delta, x
        L.append(x)

    count = 0
    for x in L:
        count = count + 1
        print "{x},".format(x=x.str()[:8]),
        if count % 7 == 0:
            print
do_precomputation()

****************************************************/

#include <iostream>
#include <cmath>

double precomputed_gamma_terms[401] = {
-0.32100, -0.31897, -0.31626, -0.31413, -0.31190, -0.30952, -0.30731,
-0.30473, -0.30307, -0.30098, -0.29938, -0.29505, -0.29422, -0.29250,
-0.29060, -0.28858, -0.28582, -0.28483, -0.28288, -0.28153, -0.27918,
-0.27727, -0.27588, -0.27351, -0.27188, -0.27023, -0.26846, -0.26700,
-0.26501, -0.26334, -0.26167, -0.26015, -0.25833, -0.25691, -0.25536,
-0.25382, -0.25233, -0.25089, -0.24944, -0.24780, -0.24625, -0.24489,
-0.24341, -0.24179, -0.24062, -0.23924, -0.23777, -0.23655, -0.23520,
-0.23382, -0.23249, -0.23105, -0.22999, -0.22886, -0.22752, -0.22618,
-0.22502, -0.22372, -0.22255, -0.22069, -0.22018, -0.21907, -0.21782,
-0.21673, -0.21569, -0.21443, -0.21309, -0.21218, -0.21122, -0.21005,
-0.20900, -0.20793, -0.20698, -0.20591, -0.20491, -0.20388, -0.20285,
-0.20199, -0.20139, -0.19992, -0.19909, -0.19801, -0.19701, -0.19612,
-0.19508, -0.19428, -0.19341, -0.19244, -0.19133, -0.19060, -0.18970,
-0.18890, -0.18798, -0.18726, -0.18631, -0.18539, -0.18455, -0.18371,
-0.18297, -0.18215, -0.18139, -0.18067, -0.17984, -0.17897, -0.17814,
-0.17747, -0.17665, -0.17591, -0.17516, -0.17411, -0.17362, -0.17293,
-0.17217, -0.17147, -0.17058, -0.17000, -0.16944, -0.16863, -0.16793,
-0.16724, -0.16664, -0.16593, -0.16521, -0.16459, -0.16381, -0.16299,
-0.16266, -0.16205, -0.16132, -0.16071, -0.16007, -0.15942, -0.15874,
-0.15819, -0.15743, -0.15697, -0.15631, -0.15594, -0.15519, -0.15458,
-0.15398, -0.15345, -0.15287, -0.15229, -0.15175, -0.15101, -0.15055,
-0.15006, -0.14950, -0.14919, -0.14840, -0.14786, -0.14756, -0.14681,
-0.14630, -0.14576, -0.14527, -0.14433, -0.14422, -0.14373, -0.14325,
-0.14272, -0.14218, -0.14174, -0.14120, -0.14087, -0.14024, -0.13977,
-0.13925, -0.13860, -0.13840, -0.13788, -0.13736, -0.13698, -0.13661,
-0.13598, -0.13556, -0.13514, -0.13470, -0.13431, -0.13374, -0.13341,
-0.13286, -0.13252, -0.13194, -0.13164, -0.13116, -0.13078, -0.13036,
-0.12988, -0.12951, -0.12910, -0.12877, -0.12830, -0.12787, -0.12748,
-0.12711, -0.12670, -0.12631, -0.12589, -0.12555, -0.12515, -0.12483,
-0.12439, -0.12399, -0.12363, -0.12324, -0.12286, -0.12247, -0.12214,
-0.12177, -0.12141, -0.12104, -0.12067, -0.12031, -0.11993, -0.11961,
-0.11949, -0.11889, -0.11854, -0.11826, -0.11792, -0.11758, -0.11706,
-0.11686, -0.11653, -0.11622, -0.11585, -0.11552, -0.11519, -0.11487,
-0.11457, -0.11430, -0.11393, -0.11359, -0.11325, -0.11296, -0.11263,
-0.11233, -0.11204, -0.11172, -0.11141, -0.11112, -0.11082, -0.11051,
-0.11020, -0.10992, -0.10959, -0.10930, -0.10903, -0.10866, -0.10841,
-0.10815, -0.10788, -0.10759, -0.10731, -0.10705, -0.10670, -0.10646,
-0.10615, -0.10586, -0.10562, -0.10535, -0.10504, -0.10481, -0.10453,
-0.10426, -0.10397, -0.10371, -0.10346, -0.10321, -0.10293, -0.10264,
-0.10252, -0.10219, -0.10187, -0.10155, -0.10139, -0.10109, -0.10090,
-0.10065, -0.10042, -0.10016, -0.09987, -0.09968, -0.09939, -0.09916,
-0.09891, -0.09870, -0.09847, -0.09818, -0.09797, -0.09772, -0.09752,
-0.09725, -0.09698, -0.09679, -0.09653, -0.09634, -0.09609, -0.09593,
-0.09565, -0.09547, -0.09519, -0.09494, -0.09476, -0.09457, -0.09430,
-0.09409, -0.09389, -0.09352, -0.09343, -0.09321, -0.09304, -0.09287,
-0.09260, -0.09245, -0.09218, -0.09186, -0.09176, -0.09156, -0.09133,
-0.09114, -0.09094, -0.09081, -0.09055, -0.09032, -0.09013, -0.08994,
-0.08976, -0.08948, -0.08940, -0.08913, -0.08901, -0.08874, -0.08854,
-0.08833, -0.08818, -0.08789, -0.08777, -0.08761, -0.08742, -0.08728,
-0.08699, -0.08688, -0.08664, -0.08645, -0.08628, -0.08613, -0.08592,
-0.08573, -0.08555, -0.08539, -0.08521, -0.08502, -0.08484, -0.08467,
-0.08447, -0.08431, -0.08414, -0.08395, -0.08379, -0.08360, -0.08344,
-0.08342, -0.08309, -0.08291, -0.08278, -0.08258, -0.08240, -0.08225,
-0.08210, -0.08192, -0.08176, -0.08158, -0.08143, -0.08127, -0.08111,
-0.08095, -0.08079, -0.08060, -0.08046, -0.08029, -0.08014, -0.08004,
-0.07985, -0.07977, -0.07952, -0.07939, -0.07922, -0.07910, -0.07883,
-0.07877, -0.07856, -0.07843, -0.07827, -0.07813, -0.07798, -0.07785,
-0.07765, -0.07759};


double gamma_terms(double Delta) {
    std::cout << Delta << std::endl;
    if(Delta < 1 || Delta > 5) {
        std::cerr << "WARNING in gamma_terms(), Delta was out of bounds." << std::endl;
        
        return 100000000000;    // this value should be large enough to indicate
                                // that something has gone wrong...
                                //
                                // I would return 0.0/0.0, but I don't remember right
                                // now what that does when -ffast-math is used.
    }

    if(Delta == 1) {
        return precomputed_gamma_terms[0];
    }
    if(Delta == 5) {
        return precomputed_gamma_terms[500];
    }
    else {
        // We use linear interpolation to estimate the value.
        //
        // I don't know exactly how accurate this is. Probably about
        // 3 digits?
        
        Delta = (Delta - 1.0) * 100;
        int a = (int)(std::floor(Delta));
        int b = (int)(std::ceil(Delta));

        if(a == b) {
            return precomputed_gamma_terms[a];
        }

        return precomputed_gamma_terms[a] * (Delta - a) + precomputed_gamma_terms[b] * (b - Delta);
    }
}
